% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/haldensify.R
\name{fit_haldensify}
\alias{fit_haldensify}
\title{Fit Conditional Density Estimation over a Sequence of HAL Models}
\usage{
fit_haldensify(
  A,
  W,
  wts = rep(1, length(A)),
  grid_type = "equal_range",
  n_bins = round(c(0.5, 1) * sqrt(length(A))),
  breaks = NULL,
  cv_folds = 5L,
  lambda_seq = exp(seq(-1, -13, length = 1000L)),
  smoothness_orders = 0L,
  ...
)
}
\arguments{
\item{A}{The \code{numeric} vector of observed values.}

\item{W}{A \code{data.frame}, \code{matrix}, or similar giving the values of
baseline covariates (potential confounders) for the observed units. These
make up the conditioning set for the conditional density estimate.}

\item{wts}{A \code{numeric} vector of observation-level weights. The default
is to weight all observations equally.}

\item{grid_type}{A \code{character} indicating the strategy to be used in
creating bins along the observed support of \code{A}. For bins of equal
range, use \code{"equal_range"}; consult the documentation of
\code{\link[ggplot2]{cut_interval}} for more information. To ensure each
bin has the same number of observations, use \code{"equal_mass"}; consult
the documentation of \code{\link[ggplot2]{cut_number}} for details.}

\item{n_bins}{This \code{numeric} value indicates the number(s) of bins into
which the support of \code{A} is to be divided. As with \code{grid_type},
multiple values may be specified, in which case cross-validation will be
used to choose the optimal number of bins. The default sets the candidate
choices of the number of bins based on heuristics tested in simulation.}

\item{breaks}{A \code{numeric} vector of break points to be used in dividing
up the support of \code{A}. Experimental and not recommended for use except
in cases where binning must be set externally; exercise care when using.}

\item{cv_folds}{A \code{numeric} indicating the number of cross-validation
folds to be used in fitting the sequence of HAL conditional density models.}

\item{lambda_seq}{A \code{numeric} sequence of values of the regularization
parameter of Lasso regression; passed to \code{\link[hal9001]{fit_hal}}.}

\item{smoothness_orders}{A \code{integer} indicating the smoothness of the
HAL basis functions; passed to \code{\link[hal9001]{fit_hal}}. The default
is set to zero, for indicator basis functions.}

\item{...}{Additional (optional) arguments of \code{\link[hal9001]{fit_hal}}
that may be used to control fitting of the HAL regression model. Possible
choices include \code{use_min}, \code{reduce_basis}, \code{return_lasso},
and \code{return_x_basis}, but this list is not exhaustive. Consult the
documentation of \code{\link[hal9001]{fit_hal}} for complete details.}
}
\value{
A \code{list}, containing density predictions for the sequence of
 fitted HAL models; the index and value of the L1 regularization parameter
 minimizing the density loss; and the sequence of empirical risks for the
 sequence of fitted HAL models.
}
\description{
Fit Conditional Density Estimation over a Sequence of HAL Models
}
\details{
Estimation of the conditional density of A|W via a cross-validated
 highly adaptive lasso, used to estimate the conditional hazard of failure
 in a given bin over the support of A.
}
\examples{
# simulate data: W ~ U[-4, 4] and A|W ~ N(mu = W, sd = 0.5)
set.seed(11249)
n_train <- 50
w <- runif(n_train, -4, 4)
a <- rnorm(n_train, w, 0.5)
# fit cross-validated HAL-based density estimator of A|W
haldensify_cvfit <- fit_haldensify(
  A = a, W = w, n_bins = 10L, lambda_seq = exp(seq(-1, -10, length = 100)),
  # the following arguments are passed to hal9001::fit_hal()
  max_degree = 3, reduce_basis = 1 / sqrt(length(a))
)
}
